name: Update Trending News

on:
  schedule:
    - cron: '0 * * * *'  # Every hour at the top of the hour
  workflow_dispatch:  # Allow manual triggering for testing
  push:
    branches: [ main ]
    paths:
      - 'trending/scripts/**'
      - '.github/workflows/update-trending-news.yml'

permissions:
  contents: write
  actions: read

jobs:
  update-news:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev build-essential
        
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Debug environment
      run: |
        echo "üêç Python version: $(python --version)"
        echo "üìÅ Current directory: $(pwd)"
        echo "üìÇ Directory contents:"
        ls -la
        echo "üìù Files in trending/scripts:"
        ls -la trending/scripts/
        echo "üîß Environment variables:"
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "PYTHONPATH: $PYTHONPATH"
        echo "üß† Memory info:"
        free -h
        
    - name: Install Python dependencies
      working-directory: ./trending/scripts
      run: |
        echo "üì¶ Installing Python dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ Dependencies installed successfully"
        
    - name: Cache AI models and data
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/huggingface
          ~/.cache/torch
          ~/.cache/pip
        key: ${{ runner.os }}-ai-models-${{ hashFiles('trending/scripts/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-ai-models-
          
    - name: Configure git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
    - name: Run trending news generator
      working-directory: ./trending/scripts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HF_HOME: ~/.cache/huggingface
        PYTHONPATH: ${{ github.workspace }}/trending/scripts
        # Memory optimization for ML libraries
        PYTORCH_CUDA_ALLOC_CONF: max_split_size_mb:512
        TOKENIZERS_PARALLELISM: "false"
        # GitHub Actions detection
        GITHUB_ACTIONS: "true"
      run: |
        echo "üöÄ Starting trending news generation at $(date)"
        echo "üìÅ Working directory: $(pwd)"
        echo "üìÑ Checking if news_generator.py exists:"
        ls -la news_generator.py
        echo "ÔøΩ Running Python script with 8-minute timeout..."
        
        # Run with shorter timeout to prevent hanging
        timeout 8m python news_generator.py 2>&1 | tee generator_output.log
        EXIT_CODE=$?
        
        if [ $EXIT_CODE -eq 124 ]; then
          echo "‚ö†Ô∏è Script timed out after 8 minutes - this is normal in GitHub Actions"
          echo "üìã Last 20 lines of output before timeout:"
          tail -n 20 generator_output.log 2>/dev/null || echo "No log available"
          # Don't exit with error - let workflow continue to check for changes
        elif [ $EXIT_CODE -ne 0 ]; then
          echo "‚ùå Script failed with exit code: $EXIT_CODE"
          echo "üìã Last 30 lines of output:"
          tail -n 30 generator_output.log 2>/dev/null || echo "No log available"
          exit 1
        else
          echo "‚úÖ Script completed successfully"
        fi
        
        echo "‚úÖ Trending news generation completed at $(date)"
        echo "üìã Script output saved to generator_output.log"
        echo "üíæ Memory status after execution:"
        free -h
        
    - name: Check for changes and cleanup
      id: changes
      run: |
        echo "üîç Checking for changes in the repository..."
        
        # Show what files exist
        echo "üìÅ Files in trending directory:"
        find trending/ -type f -name "*.html" -o -name "*.json" | head -20
        
        # Check git status
        echo "üìä Git status:"
        git status --porcelain
        
        if git diff --quiet && git diff --cached --quiet; then
          echo "‚ÑπÔ∏è  No changes detected"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Changes detected"
          echo "üìù Changed files:"
          git diff --name-only
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
        # Cleanup large temporary files
        echo "üßπ Cleaning up temporary files..."
        find . -name "*.log" -size +10M -delete 2>/dev/null || true
        find ~/.cache -name "*.tmp" -delete 2>/dev/null || true
        
    - name: Commit and push changes
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        echo "üì§ Committing and pushing changes..."
        git add .
        
        # Create detailed commit message
        COMMIT_MSG="ü§ñ Auto-update: New trending articles $(date +'%Y-%m-%d %H:%M UTC')"
        
        # Add stats to commit message
        NEW_FILES=$(git diff --cached --name-only --diff-filter=A | wc -l)
        MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=M | wc -l)
        
        if [ $NEW_FILES -gt 0 ] || [ $MODIFIED_FILES -gt 0 ]; then
          COMMIT_MSG="$COMMIT_MSG - Added: $NEW_FILES, Modified: $MODIFIED_FILES files"
        fi
        
        git commit -m "$COMMIT_MSG"
        
        # Push with retry logic
        for i in {1..3}; do
          if git push; then
            echo "‚úÖ Changes committed and pushed successfully"
            break
          else
            echo "‚ö†Ô∏è  Push attempt $i failed, retrying in 10 seconds..."
            sleep 10
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to push after 3 attempts"
              exit 1
            fi
          fi
        done
        
    - name: No changes to commit
      if: steps.changes.outputs.has_changes == 'false'
      run: |
        echo "‚ÑπÔ∏è No new content generated - no changes to commit"
        echo "üìä This could be due to:"
        echo "  ‚Ä¢ All topics already covered today"
        echo "  ‚Ä¢ Network issues preventing content generation"
        echo "  ‚Ä¢ RSS feeds not returning new content"
        
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: generator-logs-${{ github.run_number }}
        path: |
          trending/scripts/generator_output.log
          trending/scripts/daily_topics.json
        retention-days: 7